days = stripWhitespace(p2[[1]][4])
days
strsplit(days,"")
strsplit(days," ")
days = strsplit(stripWhitespace(p2[[1]][4]), " ")
days
strsplit(stripWhitespace(p2[[1]][4]), " ")
strsplit(stripWhitespace(p2[[1]][5]), " ")
strsplit(stripWhitespace(p2[[1]][6]), " ")
strsplit(stripWhitespace(p2[[1]][7]), " ")
p2 = strsplit(text[3], "\n")
strsplit(stripWhitespace(p2[[1]][4]), " ")
p3 = strsplit(text[3], "\n")
p3
strsplit(stripWhitespace(p3[[1]][16]), " ")
strsplit(stripWhitespace(p3[[1]][18]), " ")
str_split_fixed(text[3], "\n")
str_split_fixed(text[3], "\n", 19)
p3[[1]]
p3[[1]][18:30]
str_split_fixed(p3[[1]][18:30]," ", 19)
str_split_fixed(p3[[1]][18:30],"[:whitespace]", 19)
strsplit(stripWhitespace(p3[[1]][16]), " ")
strsplit(stripWhitespace(p3[[1]][16]), " ")[-1]
strsplit(stripWhitespace(p3[[1]][16]), " ")[:-1]
strsplit(stripWhitespace(p3[[1]][16]), " ")[-1:]
strsplit(stripWhitespace(p3[[1]][16]), " ")[-1]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]
]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]][-1]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]][-1:-3]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]][-1:9]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]][2:3]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]
strsplit(stripWhitespace(p3[[1]][16]), " ")[[1]]
# using this library
library(pdftools)
# assigning a varibale
Hotelpdf <- pdf_text("HotelReview12.31.17.pdf")
# printing the named variable
Hotelpdf
## extract text vector
text <- pdf_text("HotelReview12.31.17.pdf")
## print text from page 1
cat(text[1])
p3 = strsplit(text[3], "\n")
stripWhitespace(p2[[1]][4])
strsplit()
strsplit(stripWhitespace(p3[[1]][16]), " ")
strsplit(stripWhitespace(p3[[1]][18]), " ")
strsplit(stripWhitespace(p3[[1]][19]), " ")
p2
View(p2)
View(p2)
strsplit(stripWhitespace(p3[[1]][16]), " ")
strsplit(stripWhitespace(p3[[1]][64]), " ")
View(p2[[1]])
text[2]
text[3]
strsplit(text, "/n")
p5 = strsplit(text, "/n")
p5
pdfpages <- pdf_text("HotelReview12.31.17.pdf")
getwd()
setwd("/Users/victorialarson/Desktop/Dev_League/Repos/Sprtin4")
setwd("/Users/victorialarson/Desktop/Dev_League/Repos/Sprint4")
pdfpages <- pdf_text("HotelReview12.31.17.pdf")
pdfpages
pdfpages[1]
pdfpages[2]
typeof(pdfpages)
typeof(pdfpages[2])
length(pdfpages)
length(pdfpages[2])
typeof(strsplit(pdfpages))
typeof(strsplit(pdfpages," "))
lenghtof(strsplit(pdfpages," "))
lengthof(strsplit(pdfpages," "))
length(strsplit(pdfpages," "))
typeof(strsplit(pdfpages[1]," "))
length(strsplit(pdfpages[1]," "))
strsplit(pdfpages[1]," "))[[5]]
strsplit(pdfpages," "))[[5]]
strsplit(pdfpages," ")[[5]]
strsplit(pdfpages[1]," ")[[5]]
strsplit(pdfpages," ")[[5]]
typeof(strsplit(pdfpages," ")[[5]]
typeof(strsplit(pdfpages," ")[[5]])
length(strsplit(pdfpages," ")[[5]])
length(strsplit(pdfpages," ")[[5]][1])
length(strsplit(pdfpages," ")[[5]][989])
pagespaces = strplit(pdfpages)
pagespaces = strsplit(pdfpages)
pagespaces = strsplit(pdfpages," ")
pagespaces[[5]]
strsplit(pdfpages," ")[[5]]
page5 = pagespaces[[5]]
page5[1]
pagespaces[[5]][1]
strsplit(pdfpages, "")[[5]]
strsplit(pdfpages, " ")[[5]][1]
pagespaces[[5]][1]
strsplit(pdfpages, "")[[5]]
strsplit(pdfpages, "")[[5]]
page5[1]
pagespaces[[5]][1]
strsplit(pdfpages, " ")[[5]][1]
page5 = pagespaces[[5]]
typeof(HotelReview12.31.17.pdf)
type(Hotelpdf)
typeof(Hotelpdf)
Hotelpdf
pdfpages[1]
pagespaces
pagespaces[1]
pdfpages[1]
pagespaces[1]
pagespaces[[1]]
pagespaces[[1]][1]
pagespaces[[5]]
pagespaces[[5]][1]
pdfpage[2]
pdfpages[2]
typeof(pdfpages[2])
pagebreaks = strsplit(pdfpages,"\n")
pagebreaks
typeof(pagebreaks)
pagebreaks[1]
pagebreaks[[5]]
pagebreaks = strsplit(pdfpages," ")
pagebreaks
pagebreaks = strsplit(pdfpages,"\n")
pagebreaks
pagebreaks[[1]]
pagebreaks[[3]]
pdfpage3 <- pagebreaks[[3]]
pdfpage3
pdfpage3[1]
strsplit(pdfpage3, " ")
strsplit(stripWhitespace(pdfpage3[[1]], " ")
strsplit(stripWhitespace(pdfpage3[[1]], " ")
strsplit(stripWhitespace(pdfpage3[[1]], " "))
strsplit(stripWhitespace(pdfpage3[[1]]), " ")
strsplit(stripWhitespace(pdfpage3, " ")
strsplit(stripWhitespace(pdfpage3), " ")
strsplit(stripWhitespace(pdfpage3)," ")
pdfpage3[1]
pdfpage3
strsplit(pdfpage3, " ")
pdfpage3line = strsplit(pdfpage3, " ")
pdfpage3line[[67]]
pdfpage3line[[67]](x[-(1:322)])
pdfpage3line([[67]][-(1:322)])
pdfpage3line([[67]]-(1:322))
pdfpage3line(-(1:322)[[67]])
pdfpage3
pdfpage3line
View(pdfpage3)
pdfpage3[-1:10]
pdfpage3[-(1:10)]
data page = pdfpage3[-(1:10)]
datapage = pdfpage3[-(1:10)]
View(datapage)
datapage = datapage[-(1:5)]
datapage = datapage[-(2)]
datapage = datapage[-(9)]
datapage = datapage[-(15)]
datapage = datapage[-(21)]
datapage = datapage[-(46,47,48)]
datapage = datapage[-(46:48)]
datapage
strstring(datapage, "\d")
strstring(datapage,"\d")
strstring(datapage,[:digit:])
strsplit(datapage,[:digit:])
strsplit(datapage,"\d")
regexpr(pattern, datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr([:digit:], datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr(:digit:, datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr(\d, datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr("\d", datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr(digit, datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr(" ", datapage, ignore.case = FALSE, perl = FALSE,fixed = FALSE, useBytes = FALSE)
regexpr(" ", datapage)
regexpr(".", datapage)
regexpr(datapage,"[+-]?(0-9]*[.])?[0-9]+")
regexpr("[+-]?(0-9]*[.])?[0-9]+", datapage)
str_extract_all(datapage,"[+-]?(0-9]*[.])?[0-9]+")
str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage = str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage
cbind.data.frame(split(datapage, rep(1:7, times=length(datapage)/7)), stringsAsFactors=F)
cbind.data.frame(split(datapage, rep(1:18, times=length(datapage)/18)), stringsAsFactors=F)
cbind.data.frame(split(datapage, rep(1:18), stringsAsFactors=F)
cbind.data.frame(split(datapage, rep(1:18, times=length(datapage)), stringsAsFactors=F)
cbind.data.frame(split(datapage, rep(1:18, times=length(datapage)/18)), stringsAsFactors=F)
cbind.data.frame(split(datapage, rep(1:18, times=length(datapage)/18)), stringsAsFactors=F)
datapage
cbind.data.frame(split(datapage[[1]], rep(1:18, times=length(datapage)/18)), stringsAsFactors=F)
cbind.data.frame(split(datapage[[1:45]], rep(1:18, times=length(datapage)/18)), stringsAsFactors=F)
dp1 = c(datapage,[[1]])
datapagetest = c(datapage[[1]], datapage[[2]])
datapagetest
cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
unlist(datapage)
datapagetest = unlist(datapage)
datapagetest
cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
Hoteldata = cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
Hoteldata
names(Hoteldata) = c("CW_2017_Occ", "CW_2016_Occ", "CW_2017_ADR", "CW_2016_ADR", "CW_2017_RevPar","CW_2016_RevPar","CW_2017_PercentChange","CW_2016_PercentChange","28days_2017_Occ","28days_2016_Occ","28days_2017_ADR","28days_2016_ADR","28days_2017_RevPar","28days_2016_RevPar","28days_2017_PercentChange","28days_2016_PercentChange")
Hoteldata
names(Hoteldata) = c("CW_2017_Occ", "CW_2016_Occ", "CW_2017_ADR", "CW_2016_ADR", "CW_2017_RevPar","CW_2016_RevPar","CW_PercentChange_Occ","CW_PercentChange_ADR","CW_PercentChange_Revpar","28days_2017_Occ","28days_2016_Occ","28days_2017_ADR","28days_2016_ADR","28days_2017_RevPar","28days_2016_RevPar","28days_PercentChange_Occ","28days_PercentChange_ADR","28days_PercentChange_Revpar")
Hoteldata
row.names(Hoteldata) = ("Luxury","Upper Upscale","Upscale","Upper Midscale",
"Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale",
"Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort",
"Small Metro/Town","Anaheim","Atlanta",
"Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans"
"New York","Norfolk","Oahu","Orlando","Philadelphia",
"Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC"
row.names(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
row.names(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
row.names(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
rownames(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
rownames(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
rownames(Hoteldata) = c("Luxury", "Upper Upscale")
rownames(Hoteldata) <- c("Luxury", "Upper Upscale")
rownames(Hoteldata) <- c("Luxury","Upper Upscale")
View(Hoteldata)
row.names(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
row.names(Hoteldata) = c("Luxury","Upper Upscale")
row.names
row.names(Hoteldata)
row.names(Hoteldata) = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC","Meep")
row.names(Hoteldata) = c("Luxury")
row.names(Hoteldata)
row.names = row.names(Hoteldata)
hotelnames = c("Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC","Meep")
hotelnames
length(hotelnames)
length(row.names(Hoteldata))
row.names = hotelnames
row.names(Hoteldata) = hotelnames
hotelnames = c("CS Luxury","CS Upper Upscale","CS Upscale","CS Upper Midscale",CS "Midscale","CS Economy","CS Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC","Meep")
hotelnames = c("CS_Luxury","CS_Upper Upscale","CS_Upscale","CS_Upper Midscale","CS_Midscale","CS_Economy","CS_Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC","Meep")
row.names(Hoteldata) = hotelnames
hotelnames = c("Total United States","CS_Luxury","CS_Upper Upscale","CS_Upscale","CS_Upper Midscale","CS_Midscale","CS_Economy","CS_Independents","Luxury","Upper Upscale","Upscale","Upper Midscale","Midscale","Economy","Urban","Suburban","Airport","Interstate","Resort","Small Metro/Town","Anaheim","Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis","Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego","San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
row.names(Hoteldata) = hotelnames
pdfpage3[1]
pdfpage3line[[67]]
View(pdfpage3)
pdfpage3[-1:10]
pdfpage3[-(1:10)]
str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage = str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage
datapagetest = c(datapage[[1]], datapage[[2]])
datapagetest
datapagetest = unlist(datapage)
Hoteldata = cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
# Adding column names
names(Hoteldata) = c("CW_2017_Occ", "CW_2016_Occ", "CW_2017_ADR", "CW_2016_ADR",
"CW_2017_RevPar","CW_2016_RevPar","CW_PercentChange_Occ","CW_PercentChange_ADR","CW_PercentChange_Revpar",
"28days_2017_Occ","28days_2016_Occ","28days_2017_ADR","28days_2016_ADR","28days_2017_RevPar","28days_2016_RevPar",
"28days_PercentChange_Occ","28days_PercentChange_ADR","28days_PercentChange_Revpar")
Hoteldata
View(Hoteldata)
row.names(Hoteldata) = hotelnames
View(Hoteldata)
Hoteldata
library(tabulizer)
# Creating vector called "hotelnames"
hotelnames = c("Total United States","ChainScale_Luxury","ChainScale_Upper Upscale","ChainScale_Upscale","ChainScale_Upper Midscale",
"ChainScale_Midscale","ChainScale_Economy","ChainScale_Independents","Class_Luxury","Class_Upper_Upscale","Class_Upscale","Class_Upper_Midscale",
"Class_Midscale","Class_Economy","Location_Urban","Location_Suburban","Location_Airport","Location_Interstate","Location_Resort","Location_Small_Metro/Town","Anaheim",
"Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis",
"Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego",
"San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
# Creating row names
row.names(Hoteldata) = hotelnames
#Viewing my masterpiece
View(Hoteldata)
# Adding column names
names(Hoteldata) = c("CurrentWeek_2017_Occ", "CurrentWeek_2016_Occ", "CurrentWeek_2017_ADR", "CurrentWeek_2016_ADR",
"CurrentWeek_2017_RevPar","CurrentWeek_2016_RevPar","CurrentWeek_PercentChange_Occ","CurrentWeek_PercentChange_ADR","CurrentWeek_PercentChange_Revpar",
"28days_2017_Occ","28days_2016_Occ","28days_2017_ADR","28days_2016_ADR","28days_2017_RevPar","28days_2016_RevPar",
"28days_PercentChange_Occ","28days_PercentChange_ADR","28days_PercentChange_Revpar")
text
cat(text(1))
cat(text)
help(cat)
dfpages <- pdf_text("HotelReview12.31.17.pdf")
# Assigning a variable
pdfpages <- pdf_text("HotelReview12.31.17.pdf")
pdfpages
pagebreaks = strsplit(pdfpages, "\n")
pagebreaks
pdfpage3 <- pagebreaks[[3]]
pdfpage3
datapage = pdfpage3[-(1:10)]
#This is the only way I knew how to delete lines this sparatically spaced
datapage = datapage[-(1:5)]
datapage = datapage[-(2)]
datapage = datapage[-(9)]
datapage = datapage[-(15)]
datapage = datapage[-(21)]
datapage = datapage[-(46:48)]
datapage
datapage = str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage
datapage = datapage[-(46:48)]
datapage
library(pdftools)
# Assigning a variable
pdfpages <- pdf_text("HotelReview12.31.17.pdf")
# String split with "\n" - creates new lines
pagebreaks = strsplit(pdfpages, "\n")
# Want to focus on page 3 of the vector in the list.
pdfpage3 <- pagebreaks[[3]]
# Deleting lines with no data
datapage = pdfpage3[-(1:10)]
#This is the only way I knew how to delete lines this sparatically spaced
datapage = datapage[-(1:5)]
datapage = datapage[-(2)]
datapage = datapage[-(9)]
datapage = datapage[-(15)]
datapage = datapage[-(21)]
datapage = datapage[-(46:48)]
datapage
datapage = str_extract_all(datapage,"[+-]?([0-9]*[.])?[0-9]+")
datapage
# Unlisted datapage to turn all of the separate strings into one big strings
datapagetest = unlist(datapage)
# Unlisted datapage to turn all of the separate strings into one big strings
datapagetest = unlist(datapage)
datapagetest
# using cbind.data.frame to create colums from the data - making it 18 columns
Hoteldata = cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
Hoteldata
# using cbind.data.frame to create colums from the data - making it 18 columns
Hoteldata = cbind.data.frame(split(datapagetest, rep(1:18, times=length(datapagetest)/18)), stringsAsFactors=F)
# Adding column names
names(Hoteldata) = c("CurrentWeek_2017_Occ", "CurrentWeek_2016_Occ", "CurrentWeek_2017_ADR", "CurrentWeek_2016_ADR",
"CurrentWeek_2017_RevPar","CurrentWeek_2016_RevPar","CurrentWeek_PercentChange_Occ","CurrentWeek_PercentChange_ADR","CurrentWeek_PercentChange_Revpar",
"28days_2017_Occ","28days_2016_Occ","28days_2017_ADR","28days_2016_ADR","28days_2017_RevPar","28days_2016_RevPar",
"28days_PercentChange_Occ","28days_PercentChange_ADR","28days_PercentChange_Revpar")
# Creating vector called "hotelnames"
hotelnames = c("Total United States","ChainScale_Luxury","ChainScale_Upper Upscale","ChainScale_Upscale","ChainScale_Upper Midscale",
"ChainScale_Midscale","ChainScale_Economy","ChainScale_Independents","Class_Luxury","Class_Upper_Upscale","Class_Upscale","Class_Upper_Midscale",
"Class_Midscale","Class_Economy","Location_Urban","Location_Suburban","Location_Airport","Location_Interstate","Location_Resort","Location_Small_Metro/Town","Anaheim",
"Atlanta","Boston","Chicago","Dallas","Denver","Detroit","Houston","Los Angeles","Miami","Minneapolis",
"Nashville","New Orleans","New York","Norfolk","Oahu","Orlando","Philadelphia","Phoenix","San Diego",
"San Francisco","Seattle","St Louis","Tampa/St Petersburg","Washington DC")
# Creating row names
row.names(Hoteldata) = hotelnames
#Viewing my masterpiece
View(Hoteldata)
ggplot(Hoteldata)
ggplot(Hoteldata$CurrentWeek_2017_Occ)
typeof(Hoteldata)
typeof(Hoteldata$CurrentWeek_2017_Occ)
class(Hoteldata$CurrentWeek_2017_Occ)
class(Hoteldata$ChainScale_Luxury)
Hoteldata[,1]
Hoteldata[2,]
Typeof(Hoteldata[2,])
type(Hoteldata[2,])
typeof(Hoteldata[2,])
ggplot(Hoteldata[2,])
ggplot(Hoteldata[2,], aes())
ggplot(Hoteldata[2,], aes())
Hoteldata[36,]
Oahu <- Hoteldata[36,]
USA <- Hoteldata[1,]
USA
typeof(USA)
unlist(USA)
USA <- unlist(USA)
USA
Oahu <- unlist(Oahu)
USvsOahu <- c(USA, Oahu)
USvsOahu
GPA = function(GPAnum){
return(GPAnum+3)
}
GPA
GPA(3)
TORI = function(GPAnum){
return(GPAnum+3)
TORI = function(GPAnum){
return(GPAnum+3)
}
}
TORI = function(GPAnum){
return(GPAnum+3)
}
TORI(1)
GPA = function(GPAnum = 4){
return(A)
}
GPA(4)
GPA 4
GPA
"GPA = 4"
GPA(1+3)
GPA = function(GPAnum = 4){
return("A")
}
GPA(1+3)
GPA(4)
GPA(7)
GPA()
GPA = function(GPAnum){
return("A")
}
GPA()
if(GPAnum == 4) return("A") else return("blah")
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return("blah")
}
GPA(4)
GPA(1)
if(GPAnum == 4) return("A") else return(), if(GPAnumb >= 3.7 return("A-"))
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(), if(GPAnumb >= 3.7 return("A-"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(), if(GPAnum >= 3.7 return("A-"))
}
if(GPAnum >= 3.7 return("A-"))
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return()
if(GPAnum >= 3.7 return("A-"))
}
if(GPAnum >= 3.7 return("A-"))
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return("no")
if(GPAnum >= 3.7) return("A-"))
}
if(GPAnum == 4) return("A") else return("no"),
if(GPAnum >= 3.7) return("A-"))
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return("no"),
if(GPAnum >= 3.7) return("A-"))
}
if(GPAnum == 4) return("A") else return("no"),
if(GPAnum >= 3.7) return("A-")
if(GPAnum == 4) return("A") else return("no")
if(GPAnum >= 3.7) return("A-")
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return("no")
if(GPAnum >= 3.7) return("A-")
}
GPA9(3.75)
GPA(3.75)
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return("no")
if(GPAnum > 3.7) return("A-")
}
GPA(3.7)
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum > 3.7) return("A-"))
}
GPA(3.7)
GPA(4)
GPA(3.9)
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-"))
}
GPA(3.7)
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-") else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B")))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+"))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+")))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B")))))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B"))))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B") else return(if(GPAnum >= 2.7) return("B-") else return(if(GPAnum >= 2.3) return("C+") else return(if(GPAnum >= 2.0) return("C") else return(if(GPAnum >= 1.7) return("C-") else return(if(GPAnum >= 1.3) return("D+")))))))))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B") else return(if(GPAnum >= 2.7) return("B-") else return(if(GPAnum >= 2.3) return("C+") else return(if(GPAnum >= 2.0) return("C") else return(if(GPAnum >= 1.7) return("C-") else return(if(GPAnum >= 1.3) return("D+") else return(if(GPAnum >= 1.0) return("D") else return(if(GPAnum >= 0.7) return("D-") else return(if(GPAnum >= 0) return(F)))))))))))
}
GPA = function(GPAnum){
if(GPAnum == 4) return("A") else return(if(GPAnum >= 3.7) return("A-")else return(if(GPAnum >= 3.3) return("B+") else return(if(GPAnum >= 3.0) return("B") else return(if(GPAnum >= 2.7) return("B-") else return(if(GPAnum >= 2.3) return("C+") else return(if(GPAnum >= 2.0) return("C") else return(if(GPAnum >= 1.7) return("C-") else return(if(GPAnum >= 1.3) return("D+") else return(if(GPAnum >= 1.0) return("D") else return(if(GPAnum >= 0.7) return("D-") else return(if(GPAnum >= 0) return("F"))))))))))))
}
GPA(1.6)
GPA(2.6)
